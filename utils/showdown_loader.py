# Auto-generated by fix_type_effectiveness.py
from __future__ import annotations
import json, logging
from pathlib import Path
from typing import Dict, Any, Optional

log = logging.getLogger("typecalc")

def _read_json(p: Path) -> Optional[dict]:
    try:
        with p.open("r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        log.warning("Failed reading JSON %s: %s", p, e)
        return None

class ShowdownData:
    def __init__(self, data_dir: Path):
        self.data_dir = Path(data_dir)
        self.moves = {}
        self.pokedex = {}
        self.typechart = {}
        self._load()

    def _load(self):
        mv = next(iter(self.data_dir.glob('*moves*.json')), None)
        pd = next(iter(self.data_dir.glob('*pokedex*.json')), None)
        tc = next(iter(self.data_dir.glob('*typechart*.json')), None)
        if mv:
            self.moves = _read_json(mv) or {}
        if pd:
            self.pokedex = _read_json(pd) or {}
        if tc:
            self.typechart = _read_json(tc) or {}

        # Normalize keys to showdown ids
        self.moves = { (k if k == k.lower() else k.lower()): v for k, v in self.moves.items() }
        self.pokedex = { (k if k == k.lower() else k.lower()): v for k, v in self.pokedex.items() }

        # Some datasets nest under e.g. {"Moves": {...}} or {"Pokedex": {...}}
        if 'moves' in self.moves and isinstance(self.moves['moves'], dict):
            self.moves = self.moves['moves']
        if 'pokedex' in self.pokedex and isinstance(self.pokedex['pokedex'], dict):
            self.pokedex = self.pokedex['pokedex']
        if 'typechart' in self.typechart and isinstance(self.typechart['typechart'], dict):
            self.typechart = self.typechart['typechart']

    def get_move(self, move_id: str) -> dict:
        return self.moves.get(move_id, self.moves.get(move_id.lower(), {}))

    def get_species(self, species_id: str) -> dict:
        return self.pokedex.get(species_id, self.pokedex.get(species_id.lower(), {}))

    def get_types_for_species(self, species_id: str) -> list:
        sp = self.get_species(species_id)
        # poke-env & PS style datasets usually have ["types"] or "types"
        t = sp.get("types") or sp.get("type") or []
        if isinstance(t, str):
            t = [t]
        return t
